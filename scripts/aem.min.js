function sampleRUM(e, t = {}) {
  sampleRUM.defer = sampleRUM.defer || [];
  let a = (e) => {
    sampleRUM[e] = sampleRUM[e] || ((...t) => sampleRUM.defer.push({ fnname: e, args: t }));
  };
  (sampleRUM.drain =
    sampleRUM.drain ||
    ((e, t) => {
      (sampleRUM[e] = t),
        sampleRUM.defer
          .filter(({ fnname: t }) => e === t)
          .forEach(({ fnname: e, args: t }) => sampleRUM[e](...t));
    })),
    (sampleRUM.always = sampleRUM.always || []),
    (sampleRUM.always.on = (e, t) => {
      sampleRUM.always[e] = t;
    }),
    (sampleRUM.on = (e, t) => {
      sampleRUM.cases[e] = t;
    }),
    a('observe'),
    a('cwv');
  try {
    if (((window.hlx = window.hlx || {}), !window.hlx.rum)) {
      let l = new URLSearchParams(window.location.search),
        o = 'on' === l.get('rum') ? 1 : 100,
        r = Array.from({ length: 75 }, (e, t) => String.fromCharCode(48 + t))
          .filter((e) => /\d|[A-Z]/i.test(e))
          .filter(() => 75 * Math.random() > 70)
          .join(''),
        s = Math.random(),
        c = Date.now();
      window.hlx.rum = {
        weight: o,
        id: r,
        random: s,
        isSelected: s * o < 1,
        firstReadTime: c,
        sampleRUM,
        sanitizeURL: {
          full: () => window.location.href,
          origin: () => window.location.origin,
          path: () => window.location.href.replace(/\?.*$/, ''),
        }[window.hlx.RUM_MASK_URL || 'path'],
      };
    }
    let { weight: i, id: n, firstReadTime: d } = window.hlx.rum;
    if (window.hlx?.rum?.isSelected) {
      let p = [
        'weight',
        'id',
        'referer',
        'checkpoint',
        't',
        'source',
        'target',
        'cwv',
        'CLS',
        'FID',
        'LCP',
        'INP',
      ];
      (sampleRUM.cases = sampleRUM.cases || {
        cwv: () => sampleRUM.cwv(t) || !0,
        lazy() {
          let e = document.createElement('script');
          return (
            (e.src = 'https://rum.hlx.page/.rum/@adobe/helix-rum-enhancer@^1/src/index.js'),
            document.head.appendChild(e),
            !0
          );
        },
      }),
        ((a = t) => {
          let l = JSON.stringify(
              {
                weight: i,
                id: n,
                referer: window.hlx.rum.sanitizeURL(),
                checkpoint: e,
                t: Date.now() - d,
                ...t,
              },
              p,
            ),
            o = `https://rum.hlx.page/.rum/${i}`;
          navigator.sendBeacon(o, l), console.debug(`ping:${e}`, a);
        })(t),
        sampleRUM.cases[e] && sampleRUM.cases[e]();
    }
    sampleRUM.always[e] && sampleRUM.always[e](t);
  } catch (h) {}
}
function setup() {
  (window.hlx = window.hlx || {}),
    (window.hlx.RUM_MASK_URL = 'full'),
    (window.hlx.codeBasePath = ''),
    (window.hlx.lighthouse =
      'on' === new URLSearchParams(window.location.search).get('lighthouse'));
  let e = document.querySelector('script[src$="/scripts/scripts.js"]');
  if (e)
    try {
      [window.hlx.codeBasePath] = new URL(e.src).pathname.split('/scripts/scripts.js');
    } catch (t) {
      console.log(t);
    }
}
function init() {
  setup(),
    sampleRUM('top'),
    window.addEventListener('load', () => sampleRUM('load')),
    window.addEventListener('unhandledrejection', (e) => {
      sampleRUM('error', { source: e.reason.sourceURL, target: e.reason.line });
    }),
    window.addEventListener('error', (e) => {
      sampleRUM('error', { source: e.filename, target: e.lineno });
    });
}
function toClassName(e) {
  return 'string' == typeof e
    ? e
        .toLowerCase()
        .replace(/[^0-9a-z]/gi, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '')
    : '';
}
function toCamelCase(e) {
  return toClassName(e).replace(/-([a-z])/g, (e) => e[1].toUpperCase());
}
function readBlockConfig(e) {
  let t = {};
  return (
    e.querySelectorAll(':scope > div').forEach((e) => {
      if (e.children) {
        let a = [...e.children];
        if (a[1]) {
          let l = a[1],
            o = toClassName(a[0].textContent),
            r = '';
          if (l.querySelector('a')) {
            let s = [...l.querySelectorAll('a')];
            r = 1 === s.length ? s[0].href : s.map((e) => e.href);
          } else if (l.querySelector('img')) {
            let c = [...l.querySelectorAll('img')];
            r = 1 === c.length ? c[0].src : c.map((e) => e.src);
          } else if (l.querySelector('p')) {
            let i = [...l.querySelectorAll('p')];
            r = 1 === i.length ? i[0].textContent : i.map((e) => e.textContent);
          } else r = e.children[1].textContent;
          t[o] = r;
        }
      }
    }),
    t
  );
}
async function loadCSS(e) {
  return new Promise((t, a) => {
    if (document.querySelector(`head > link[href="${e}"]`)) t();
    else {
      let l = document.createElement('link');
      (l.rel = 'stylesheet'),
        (l.href = e),
        (l.onload = t),
        (l.onerror = a),
        document.head.append(l);
    }
  });
}
async function loadScript(e, t) {
  return new Promise((a, l) => {
    if (document.querySelector(`head > script[src="${e}"]`)) a();
    else {
      let o = document.createElement('script');
      if (((o.src = e), t)) for (let r in t) o.setAttribute(r, t[r]);
      (o.onload = a), (o.onerror = l), document.head.append(o);
    }
  });
}
function getMetadata(e, t = document) {
  let a = e?.includes(':') ? 'property' : 'name',
    l = [...t.head.querySelectorAll(`meta[${a}="${e}"]`)].map((e) => e.content).join(', ');
  return l || '';
}
function createOptimizedPicture(
  e,
  t = '',
  a = !1,
  l = [{ media: '(min-width: 600px)', width: '2000' }, { width: '750' }],
) {
  let o = new URL(
      e,
      window.location.href.startsWith('http')
        ? window.location.href
        : 'https://main--darts-product-information--headwire-edge-delivery.hlx.page/',
    ),
    r = document.createElement('picture'),
    { pathname: s } = o,
    c = s.substring(s.lastIndexOf('.') + 1);
  return (
    l.forEach((e) => {
      let t = document.createElement('source');
      e.media && t.setAttribute('media', e.media),
        t.setAttribute('type', 'image/webp'),
        t.setAttribute('srcset', `${s}?width=${e.width}&format=webply&optimize=medium`),
        r.appendChild(t);
    }),
    l.forEach((e, o) => {
      if (o < l.length - 1) {
        let i = document.createElement('source');
        e.media && i.setAttribute('media', e.media),
          i.setAttribute('srcset', `${s}?width=${e.width}&format=${c}&optimize=medium`),
          r.appendChild(i);
      } else {
        let n = document.createElement('img');
        n.setAttribute('loading', a ? 'eager' : 'lazy'),
          n.setAttribute('alt', t),
          r.appendChild(n),
          n.setAttribute('src', `${s}?width=${e.width}&format=${c}&optimize=medium`),
          n.setAttribute('width', `${e.width}`),
          n.setAttribute('height', `${e.height}`);
      }
    }),
    r
  );
}
function decorateTemplateAndTheme() {
  let e = (e, t) => {
      t.split(',').forEach((t) => {
        e.classList.add(toClassName(t.trim()));
      });
    },
    t = getMetadata('template');
  t && e(document.body, t);
  let a = getMetadata('theme');
  a && e(document.body, a);
}
function decorateButtons(e) {
  e.querySelectorAll('a').forEach((e) => {
    if (((e.title = e.title || e.textContent), e.href !== e.textContent)) {
      let t = e.parentElement,
        a = e.parentElement.parentElement;
      if (
        (e.querySelector('img') ||
          (1 !== t.childNodes.length ||
            ('P' !== t.tagName && 'DIV' !== t.tagName) ||
            ((e.className = 'button'),
            (e.ariaLabel = e.ariaLabel || e.title || e.href),
            e.href.endsWith('contact.json') || t.classList.add('button-container')),
          1 === t.childNodes.length &&
            'STRONG' === t.tagName &&
            1 === a.childNodes.length &&
            'P' === a.tagName &&
            ((e.className = 'button primary'), a.classList.add('button-container')),
          1 === t.childNodes.length &&
            'EM' === t.tagName &&
            1 === a.childNodes.length &&
            'P' === a.tagName &&
            ((e.className = 'button secondary'), a.classList.add('button-container'))),
        t.classList.contains('button-container'))
      ) {
        let l = document.createElement('div');
        (l.className = 'hex'), t.insertBefore(l, e), l.appendChild(e);
      }
    }
  });
}
function decorateIcon(e, t = '') {
  let a = Array.from(e.classList)
      .find((e) => e.startsWith('icon-'))
      .substring(5),
    l = document.createElement('img');
  (l.dataset.iconName = a),
    (l.src = `${window.hlx.codeBasePath}${t}/icons/${a}.svg`),
    (l.loading = 'lazy'),
    (l.alt = ''),
    e.append(l);
}
function decorateIcons(e, t = '') {
  let a = [...e.querySelectorAll('span.icon')];
  a.forEach((e) => {
    decorateIcon(e, t);
  });
}
function decorateSections(e) {
  e.querySelectorAll(':scope > div').forEach((e) => {
    let t = [],
      a = !1;
    [...e.children].forEach((e) => {
      if ('DIV' === e.tagName || !a) {
        let l = document.createElement('div');
        t.push(l), (a = 'DIV' !== e.tagName) && l.classList.add('default-content-wrapper');
      }
      t[t.length - 1].append(e);
    }),
      t.forEach((t) => e.append(t)),
      e.classList.add('section'),
      (e.dataset.sectionStatus = 'initialized'),
      (e.style.display = 'none');
    let l = e.querySelector('div.section-metadata');
    if (l) {
      let o = readBlockConfig(l);
      Object.keys(o).forEach((t) => {
        if ('style' === t) {
          let a = o.style.split(',').map((e) => toClassName(e.trim()));
          a.forEach((t) => e.classList.add(t));
        } else e.dataset[toCamelCase(t)] = o[t];
      }),
        l.parentNode.remove();
    }
  });
}
async function fetchPlaceholders(e = 'default') {
  return (
    (window.placeholders = window.placeholders || {}),
    window.placeholders[e] ||
      (window.placeholders[e] = new Promise((t) => {
        fetch(`${'default' === e ? '' : e}/placeholders.json`)
          .then((e) => (e.ok ? e.json() : {}))
          .then((a) => {
            let l = {};
            a.data
              .filter((e) => e.Key)
              .forEach((e) => {
                l[toCamelCase(e.Key)] = e.Text;
              }),
              (window.placeholders[e] = l),
              t(window.placeholders[e]);
          })
          .catch(() => {
            (window.placeholders[e] = {}), t(window.placeholders[e]);
          });
      })),
    window.placeholders[`${e}`]
  );
}
function updateSectionsStatus(e) {
  let t = [...e.querySelectorAll(':scope > div.section')];
  for (let a of t) {
    let l = a.dataset.sectionStatus;
    if ('loaded' !== l) {
      let o = a.querySelector(
        '.block[data-block-status="initialized"], .block[data-block-status="loading"]',
      );
      if (o) {
        a.dataset.sectionStatus = 'loading';
        break;
      }
      (a.dataset.sectionStatus = 'loaded'), (a.style.display = null);
    }
  }
}
function buildBlock(e, t) {
  let a = Array.isArray(t) ? t : [[t]],
    l = document.createElement('div');
  return (
    l.classList.add(e),
    a.forEach((e) => {
      let t = document.createElement('div');
      e.forEach((e) => {
        let a = document.createElement('div'),
          l = e.elems ? e.elems : [e];
        l.forEach((e) => {
          e && ('string' == typeof e ? (a.innerHTML += e) : a.appendChild(e));
        }),
          t.appendChild(a);
      }),
        l.appendChild(t);
    }),
    l
  );
}
async function loadBlock(e) {
  let t = e.dataset.blockStatus;
  if ('loading' !== t && 'loaded' !== t) {
    e.dataset.blockStatus = 'loading';
    let { blockName: a } = e.dataset;
    try {
      let l = loadCSS(`${window.hlx.codeBasePath}/blocks/${a}/${a}.css`),
        o = new Promise((t) => {
          (async () => {
            try {
              let l = await import(`${window.hlx.codeBasePath}/blocks/${a}/${a}.js`);
              l.default && (await l.default(e));
            } catch (o) {
              console.log(`failed to load module for ${a}`, o);
            }
            t();
          })();
        });
      await Promise.all([l, o]);
    } catch (r) {
      console.log(`failed to load block ${a}`, r);
    }
    e.dataset.blockStatus = 'loaded';
  }
  return e;
}
async function loadBlocks(e) {
  updateSectionsStatus(e);
  let t = [...e.querySelectorAll('div.block')];
  for (let a of t) await loadBlock(a), updateSectionsStatus(e);
}
function decorateBlock(e) {
  let t = e.classList[0];
  if (t) {
    e.classList.add('block'), (e.dataset.blockName = t), (e.dataset.blockStatus = 'initialized');
    let a = e.parentElement;
    a.classList.add(`${t}-wrapper`);
    let l = e.closest('.section');
    l && l.classList.add(`${t}-container`);
  }
}
function decorateBlocks(e) {
  e.querySelectorAll('div.section > div > div').forEach(decorateBlock);
}
async function loadHeader(e) {
  let t = buildBlock('header', '');
  return e.append(t), decorateBlock(t), loadBlock(t);
}
async function loadFooter(e) {
  let t = buildBlock('footer', '');
  return e.append(t), decorateBlock(t), loadBlock(t);
}
async function waitForLCP(e) {
  let t = document.querySelector('.block'),
    a = t && e.includes(t.dataset.blockName);
  a && (await loadBlock(t)), (document.body.style.display = null);
  let l = document.querySelector('main img');
  await new Promise((e) => {
    l && !l.complete
      ? (l.setAttribute('loading', 'eager'),
        l.addEventListener('load', e),
        l.addEventListener('error', e))
      : e();
  });
}
init();
export {
  buildBlock,
  createOptimizedPicture,
  decorateBlock,
  decorateBlocks,
  decorateButtons,
  decorateIcons,
  decorateSections,
  decorateTemplateAndTheme,
  fetchPlaceholders,
  getMetadata,
  loadBlock,
  loadBlocks,
  loadCSS,
  loadFooter,
  loadHeader,
  loadScript,
  readBlockConfig,
  sampleRUM,
  setup,
  toCamelCase,
  toClassName,
  updateSectionsStatus,
  waitForLCP,
};
